-- C. Ingredient Optimisation
-- 1. What are the standard ingredients for each pizza?
WITH toppings AS (SELECT pizza_id,
regexp_split_to_table(toppings, ',')::INTEGER AS topping_id -- splits string into individual rows and cast to integer
--COUNT(*) c
FROM pizza_recipes
)
SELECT pizza_name, topping_name std_toppings
FROM toppings t
JOIN pizza_toppings p ON t.topping_id=p.topping_id
JOIN pizza_names n ON t.pizza_id=n.pizza_id
--GROUP BY t.topping_id, topping_name
--HAVING SUM(c)>1
ORDER BY t.pizza_id;

-- 2. What was the most commonly added extra?
WITH extra_toppings AS (SELECT 
regexp_split_to_table(extras, ',')::INTEGER AS extra_toppings -- splits string into individual rows and cast to integer
FROM customer_orders
WHERE extras!='')

SELECT topping_name most_added
FROM extra_toppings e
JOIN pizza_toppings p ON e.extra_toppings=p.topping_id
GROUP BY topping_name
ORDER BY COUNT(extra_toppings) DESC
LIMIT 1;

-- 3. What was the most common exclusion?
WITH excluded_toppings AS (SELECT 
regexp_split_to_table(exclusions, ',')::INTEGER AS excluded_toppings -- splits string into individual rows and cast to integer
FROM customer_orders
WHERE exclusions!='')

SELECT topping_name most_excluded
FROM excluded_toppings e
JOIN pizza_toppings p ON e.excluded_toppings=p.topping_id
GROUP BY topping_name
ORDER BY COUNT(excluded_toppings) DESC
LIMIT 1;

-- 4. Generate an order item for each record in the customers_orders table in the format of one of the following:
-- Meat Lovers
DELETE FROM customer_orders WHERE order_id=11;
INSERT INTO customer_orders(order_id, pizza_id, exclusions, extras, order_time)
VALUES (11, 1, '','',NOW())
RETURNING *;
-- Meat Lovers - Exclude Beef
INSERT INTO customer_orders(order_id, pizza_id, exclusions, extras, order_time)
VALUES (12, 1, 3,'',NOW())
RETURNING *;
-- Meat Lovers - Extra Bacon
INSERT INTO customer_orders(order_id, pizza_id, exclusions, extras, order_time)
VALUES (13, 1, '',1,NOW())
RETURNING *;
-- Meat Lovers - Exclude Cheese, Bacon - Extra Mushroom, Peppers
INSERT INTO customer_orders(order_id, pizza_id, exclusions, extras, order_time)
VALUES (14, 1, '4,1','6,9',NOW())
RETURNING *;

SELECT * FROM customer_orders ORDER BY order_id;
SELECT * FROM pizza_names;
SELECT * FROM pizza_toppings;

-- 5. Generate an alphabetically ordered comma separated ingredient list for each pizza order from 
-- the customer_orders table and add a 2x in front of any relevant ingredients
-- For example: "Meat Lovers: 2xBacon, Beef, ... , Salami"
DROP VIEW IF EXISTS ingredients;
CREATE VIEW ingredients AS
SELECT pizza_name, r.pizza_id, toppings, 
regexp_split_to_table(toppings, ',')::INTEGER AS topping_id
FROM pizza_recipes r
JOIN pizza_names n ON r.pizza_id=n.pizza_id;

SELECT * FROM ingredients;

DROP VIEW IF EXISTS recipes;
CREATE VIEW recipes AS 
SELECT pizza_name, pizza_id,
CASE
WHEN pizza_id=1 THEN STRING_AGG(topping_name, ', ') 
WHEN pizza_id=2 THEN STRING_AGG(topping_name, ', ') 
END ing_list
FROM ingredients i
JOIN pizza_toppings t ON i.topping_id=t.topping_id
GROUP BY pizza_name, pizza_id;
--
DROP VIEW IF EXISTS excluded;
CREATE VIEW excluded AS
SELECT DISTINCT order_id,
regexp_split_to_table(exclusions, ',')::INTEGER excluded_toppings
FROM customer_orders
WHERE exclusions!=''
ORDER BY order_id;

DROP VIEW IF EXISTS extras;
CREATE VIEW extras AS
SELECT DISTINCT order_id,
regexp_split_to_table(extras, ',')::INTEGER extra_toppings
FROM customer_orders
WHERE extras!=''
ORDER BY order_id;

--DROP VIEW IF EXISTS excluded_toppings;
--CREATE VIEW excluded_toppings AS
--SELECT order_id,
--array_to_string(array_agg(employee), ',')
--FROM mytable
--GROUP BY company_id;
--FROM excluded e
--JOIN pizza_toppings t ON e.excluded_toppings=t.topping_id;

SELECT c.order_id, c.pizza_id, i.topping_id, t.topping_name
FROM customer_orders c
JOIN ingredients i ON c.pizza_id=i.pizza_id
LEFT JOIN excluded e ON c.order_id=e.order_id
LEFT JOIN extras x ON c.order_id=x.order_id
JOIN pizza_toppings t ON t.topping_id=i.topping_id
WHERE i.topping_id!=excluded_toppings OR i.topping_id!=extra_toppings
ORDER BY c.order_id;

SELECT * FROM customer_orders ORDER BY order_id;

-- 6. What is the total quantity of each ingredient used in all delivered pizzas sorted by most frequent first?


