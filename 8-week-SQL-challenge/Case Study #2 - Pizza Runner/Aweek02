-- First, we perform some cleaning.  
-- replace null values and 'null' strings in customer_orders table
UPDATE customer_orders SET exclusions = '' WHERE exclusions='null';
UPDATE customer_orders SET extras = '' WHERE extras='null';
UPDATE customer_orders SET extras = '' WHERE extras IS NULL;
SELECT * FROM customer_orders;

-- cast pickup_time into timestamp in runner_orders table
UPDATE runner_orders SET pickup_time = NULL WHERE pickup_time ='null'; --replace string 'null' for NULL value
ALTER TABLE runner_orders ALTER COLUMN pickup_time TYPE TIMESTAMP USING pickup_time::TIMESTAMP;

-- cast duration to integer in runner_orders table
UPDATE runner_orders SET duration = NULL WHERE duration ='null'; --replace string 'null' for NULL value
ALTER TABLE runner_orders ADD COLUMN duration2 VARCHAR(23); -- copy duration column
UPDATE runner_orders SET duration2 = LEFT(duration,2); -- copy duration values into duration2
ALTER TABLE runner_orders ALTER COLUMN duration2 TYPE INT USING duration2::INTEGER; -- cast duration2 to integer

-- replace NULL values and 'null' strings with empty string
UPDATE runner_orders SET cancellation = '' WHERE cancellation='null';
UPDATE runner_orders SET cancellation = '' WHERE cancellation IS NULL;

-- cast distance column into numeric in runner_orders table
UPDATE runner_orders SET distance = REPLACE(distance,'km',''); -- drop 'km' substring
UPDATE runner_orders SET distance = NULL WHERE distance='null'; -- replace 'null' string with NULL value
UPDATE runner_orders SET distance = REGEXP_REPLACE(distance, '\s+$', ''); -- drop trailing whitespaces
ALTER TABLE runner_orders ALTER COLUMN distance TYPE NUMERIC USING distance::NUMERIC; -- cast distance to numeric

-- reorder columns in runner_orders
ALTER TABLE runner_orders RENAME TO runner_orders2; -- rename table
CREATE TABLE runner_orders(
  "order_id" INTEGER,
  "runner_id" INTEGER,
  "pickup_time" TIMESTAMP,
  "distance" NUMERIC,
  "duration" INTEGER,
  "cancellation" VARCHAR(23)); -- create new table with original name and structure
INSERT INTO runner_orders (order_id, runner_id, pickup_time,distance, duration,cancellation) 
SELECT order_id, runner_id, pickup_time,distance, duration2,cancellation FROM runner_orders2; -- copy values from old table to new table
DROP TABLE runner_orders2; -- drop old table



-- A. Pizza Metrics
-- How many pizzas were ordered?
SELECT COUNT(*) AS pizzas_ordered FROM customer_orders;

-- How many unique customer orders were made?
SELECT COUNT(DISTINCT order_id) unique_orders FROM customer_orders;

-- How many successful orders were delivered by each runner?
SELECT runner_id, COUNT(DISTINCT order_id) delivered_orders 
FROM runner_orders
WHERE cancellation=''
GROUP BY runner_id;


-- How many of each type of pizza was delivered?
SELECT pizza_name, COUNT(c.pizza_id) number_pizzas
FROM runner_orders r
JOIN customer_orders c ON r.order_id=c.order_id
JOIN pizza_names p ON c.pizza_id=p.pizza_id
WHERE cancellation=''
GROUP BY pizza_name;

-- How many Vegetarian and Meatlovers were ordered by each customer?
SELECT customer_id, pizza_name, COUNT(pizza_name) qty_ordered
FROM customer_orders c
JOIN pizza_names p ON c.pizza_id=p.pizza_id
GROUP BY customer_id, pizza_name
ORDER BY customer_id;

-- What was the maximum number of pizzas delivered in a single order?
SELECT c.order_id, COUNT(pizza_id) pizzas_ordered
FROM runner_orders r
JOIN customer_orders c ON r.order_id=c.order_id
WHERE cancellation=''
GROUP BY c.order_id
ORDER BY COUNT(pizza_id) DESC
LIMIT  1;

-- For each customer, how many delivered pizzas had at least 1 change and how many had no changes?
SELECT customer_id,
SUM(CASE
WHEN exclusions='' AND extras='' THEN 0
ELSE 1
END) changed_pizzas,
SUM(CASE
WHEN exclusions='' AND extras='' THEN 1
ELSE 0
END) not_changed_pizzas
FROM customer_orders c
JOIN runner_orders r ON c.order_id=r.order_id
WHERE cancellation=''
GROUP BY customer_id
ORDER BY customer_id;

-- How many pizzas were delivered that had both exclusions and extras?
SELECT 
SUM(CASE
WHEN exclusions='' OR extras='' THEN 0
ELSE 1
END) changed_pizzas
FROM customer_orders c
JOIN runner_orders r ON c.order_id=r.order_id
WHERE cancellation='';

-- What was the total volume of pizzas ordered for each hour of the day?
WITH hourly AS (
SELECT EXTRACT(HOUR FROM order_time) hour_of_day, COUNT(*) per_hour,
SUM(COUNT(*)) OVER () AS total -- sum widow function
FROM customer_orders
GROUP BY EXTRACT(HOUR FROM order_time)
ORDER BY EXTRACT(HOUR FROM order_time))

SELECT hour_of_day, ROUND((per_hour*100)/total, 2) perc
FROM hourly;


-- What was the volume of orders for each day of the week?
WITH daily AS (
SELECT EXTRACT(DOW FROM order_time) day_of_week, COUNT(DISTINCT order_id) orders_per_dow,
SUM(COUNT(DISTINCT order_id)) OVER () AS total -- sum window function
FROM customer_orders
GROUP BY EXTRACT(DOW FROM order_time)
ORDER BY EXTRACT(DOW FROM order_time))

SELECT CASE
WHEN day_of_week=0 THEN 'Sunday'
WHEN day_of_week=1 THEN 'Monday'
WHEN day_of_week=2 THEN 'Tuesday'
WHEN day_of_week=3 THEN 'Wednesday'
WHEN day_of_week=4 THEN 'Thursday'
WHEN day_of_week=5 THEN 'Friday'
WHEN day_of_week=6 THEN 'Saturday'
ELSE NULL
END weekday, 
orders_per_dow,
ROUND((orders_per_dow*100)/total, 2) perc
FROM daily;