-- D. Pricing and Ratings

-- 1. If a Meat Lovers pizza costs $12 and Vegetarian costs $10 and there were no charges for changes - how much money has Pizza Runner made so far if there are no delivery fees?
SELECT pizza_name,
SUM(CASE
WHEN o.pizza_id=1 THEN 12
WHEN o.pizza_id=2 THEN 10
ELSE 0
END) total_sale
FROM customer_orders o
JOIN pizza_names n ON o.pizza_id=n.pizza_id
GROUP BY pizza_name, o.pizza_id
ORDER BY o.pizza_id;

-- 2. What if there was an additional $1 charge for any pizza extras?
-- ● Add cheese is $1 extra
DROP VIEW order_number;
CREATE VIEW order_number AS 
SELECT ROW_NUMBER() OVER () row_num, order_id, customer_id, pizza_id, exclusions, extras, order_time
FROM customer_orders;

DROP VIEW additional;
CREATE VIEW additional AS
SELECT row_num, 
regexp_split_to_table(extras, ',')::INTEGER AS extra_toppings -- splits string into individual rows and cast to integer
FROM order_number
WHERE extras!='';

WITH plus_extras AS (
SELECT n.row_num, order_id, pizza_id, 
SUM(CASE WHEN extra_toppings!=0 THEN 1
ELSE 0
END) extra_toppings
FROM order_number n
LEFT JOIN additional a ON n.row_num=a.row_num 
GROUP BY n.row_num, order_id, pizza_id
ORDER BY n.row_num)

SELECT pizza_name,
SUM(CASE 
WHEN p.pizza_id= 1 THEN 12+extra_toppings
WHEN p.pizza_id= 2 THEN 10+extra_toppings
END) total_sale
FROM plus_extras p
JOIN pizza_names n ON p.pizza_id=n.pizza_id
GROUP BY pizza_name;

-- 3. The Pizza Runner team now wants to add an additional ratings system that allows customers to rate their runner, how would you design an additional table for this new dataset 
-- - generate a schema for this new table and insert your own data for ratings for each successful customer order between 1 to 5.
DROP TABLE IF EXISTS ratings;
CREATE TABLE ratings (
"runner_id" INTEGER,
"order_id" INTEGER NOT NULL UNIQUE,
"rating" INTEGER CHECK (rating BETWEEN 1 AND 5)
);

INSERT INTO ratings
  ("runner_id", "order_id", "rating")
VALUES
  (1, 1, 2),
  (1, 2, 3),
  (1, 3, 4),
  (2, 4, 1),
  (3, 5, 4),
  (2, 7, 3),
  (2, 8, 4),
  (1, 10, 5);

-- 4. Using your newly generated table - can you join all of the information together to form a table which has the following information for successful deliveries?
-- ● customer_id
-- ● order_id
-- ● runner_id
-- ● rating
-- ● order_time
-- ● pickup_time
-- ● time between order and pickup
-- ● delivery duration
-- ● average speed
-- ● total number of pizzas
SELECT co.customer_id, co.order_id, ro.runner_id, r.rating, co.order_time, ro.pickup_time, ro.pickup_time-co.order_time AS diff, 
ro.duration AS duration_mins, ROUND(ro.distance/ro.duration,2)*60 AS avg_speed_km_h, COUNT(*) AS total_pizzas
FROM customer_orders co
JOIN runner_orders ro ON co.order_id=ro.order_id
JOIN ratings r ON ro.order_id=r.order_id
GROUP BY co.customer_id, co.order_id, ro.runner_id, r.rating, co.order_time, ro.pickup_time, ro.duration, ROUND(ro.distance/ro.duration,2)
ORDER BY co.order_id;


-- 6. If a Meat Lovers pizza was $12 and Vegetarian $10 fixed prices with no cost for extras and each runner is paid $0.30 per kilometre traveled - 
-- how much money does Pizza Runner have left over after these deliveries?
WITH sales_cost AS (
SELECT SUM(CASE
WHEN co.pizza_id=1 THEN 12
WHEN co.pizza_id=2 THEN 10
END) sale_total,
SUM(ro.distance*.3) trip_rate
FROM customer_orders co
JOIN runner_orders ro ON co.order_id=ro.order_id
WHERE ro.distance IS NOT NULL)

SELECT *, sale_total-trip_rate AS net_total
FROM sales_cost;