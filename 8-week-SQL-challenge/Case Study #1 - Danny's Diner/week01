-- CASE STUDY QUESTIONS --
SELECT * FROM menu;
SELECT * FROM sales;
SELECT * FROM members;


-- 1. What is the total amount each customer spent at the restaurant?
SELECT customer_id, SUM(price) AS amount_spent 
FROM sales s
JOIN menu m ON s.product_id=m.product_id
GROUP BY customer_id
ORDER BY customer_id;

-- 2. How many days has each customer visited the restaurant?
SELECT customer_id, COUNT(DISTINCT order_date) AS times_visited
FROM sales
GROUP BY customer_id
ORDER BY customer_id;

-- 3. What was the first item from the menu purchased by each customer?
WITH ranking AS (SELECT *, DENSE_RANK() OVER (PARTITION BY customer_id ORDER BY order_date) AS ranking
FROM sales)

SELECT customer_id, product_name
FROM ranking r
JOIN menu m ON r.product_id=m.product_id
WHERE ranking=1
ORDER BY customer_id;

-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?
SELECT product_name, COUNT(order_date) AS times_purchased
FROM sales s
JOIN menu m ON s.product_id=m.product_id
GROUP BY product_name
ORDER BY times_purchased DESC
LIMIT 1;

-- 5. Which item was the most popular for each customer?
WITH most_popular AS (SELECT customer_id, product_name, COUNT(product_name),
DENSE_RANK() OVER (PARTITION BY customer_id ORDER BY COUNT(product_name) DESC) AS ranking
FROM sales s
JOIN menu m ON s.product_id=m.product_id
GROUP BY customer_id, product_name
ORDER BY customer_id)

SELECT customer_id, product_name
FROM most_popular
WHERE ranking=1;

-- 6. Which item was purchased first by the customer after they became a member?
WITH first_order AS (SELECT b.customer_id, product_name, order_date, join_date,
DENSE_RANK() OVER (PARTITION BY b.customer_id ORDER BY order_date) AS first_order
FROM sales s
JOIN menu a ON s.product_id=a.product_id
JOIN members b ON s.customer_id=b.customer_id
WHERE order_date>=join_date
ORDER BY b.customer_id, order_date)

SELECT customer_id, product_name
FROM first_order
WHERE first_order=1;

-- 7. Which item was purchased just before the customer became a member?
WITH before_membership AS (SELECT s.customer_id, join_date, order_date, product_name,
DENSE_RANK() OVER (PARTITION BY b.customer_id ORDER BY order_date DESC) AS before_membership -- the reason why we order by descending date is because the latest date before becoming a member
FROM sales s
JOIN menu a ON s.product_id=a.product_id
JOIN members b ON s.customer_id=b.customer_id
WHERE join_date>order_date
ORDER BY s.customer_id, order_date)

SELECT customer_id, product_name
FROM before_membership
WHERE before_membership=1;

-- 8. What is the total items and amount spent for each member before they became a member?
SELECT s.customer_id, COUNT(product_name) products_purchased, SUM(price) amount_spent
FROM sales s
JOIN menu a ON s.product_id=a.product_id
JOIN members b ON s.customer_id=b.customer_id
WHERE join_date>order_date
GROUP BY s.customer_id
ORDER BY s.customer_id;

-- 9. If each $1 spent equates to 10 points and sushi has a 2x points multiplier - 
-- how many points would each customer have?
SELECT customer_id, 
SUM(CASE
WHEN product_name='sushi' THEN price*20
ELSE price*10
END) total_points
FROM sales s
JOIN menu m ON s.product_id=m.product_id
GROUP BY customer_id
ORDER BY customer_id;

-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on
-- all items, not just sushi - how many points do customer A and B have at the end of January?
WITH first_week AS (SELECT s.customer_id, join_date, join_date + interval '6 days' first_week
FROM sales s
JOIN menu a ON s.product_id=a.product_id
JOIN members b ON s.customer_id=b.customer_id
GROUP BY s.customer_id, join_date
ORDER BY s.customer_id)

SELECT s.customer_id, 
SUM(CASE 
WHEN order_date BETWEEN join_date AND first_week THEN price*20
WHEN product_name='sushi' THEN price*20
ELSE price*10
END) january_points
FROM sales s
JOIN menu a ON s.product_id=a.product_id
JOIN first_week f ON s.customer_id=f.customer_id
WHERE order_date<='2021-01-31'
GROUP BY s.customer_id
ORDER BY s.customer_id;

-- BONUS QUESTIONS --

-- Join all the things
-- Table 1
SELECT s.customer_id, order_date, product_name, price,
CASE
WHEN order_date<join_date THEN 'N'
WHEN join_date IS NULL THEN 'N'
ELSE 'Y'
END member
FROM sales s
JOIN menu a ON s.product_id=a.product_id
LEFT JOIN members b ON s.customer_id=b.customer_id
ORDER BY s.customer_id, order_date;

-- Rank all the things
-- Table 2
WITH membership AS (SELECT s.customer_id, order_date, product_name, price,
CASE
WHEN order_date<join_date THEN 'N'
WHEN join_date IS NULL THEN 'N'
ELSE 'Y'
END member
FROM sales s
JOIN menu a ON s.product_id=a.product_id
LEFT JOIN members b ON s.customer_id=b.customer_id
ORDER BY s.customer_id, order_date)

SELECT *,
CASE
WHEN member='N' THEN NULL
ELSE DENSE_RANK() OVER (PARTITION BY customer_id, member ORDER BY order_date)
END rank
FROM membership;